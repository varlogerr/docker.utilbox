#!/bin/bash

: ${NODEV:=8.9}
: ${DNODE_PARAMS:=''}

dnode_params=''
if [ -f $HOME/.dnode_params ]; then
    dnode_params="${dnode_params} "`cat ${HOME}/.dnode_params | tr '\n' ' '`
fi
if [ -f $(pwd)/.dnode_params ]; then
    dnode_params="${dnode_params} "`cat $(pwd)/.dnode_params | tr '\n' ' '`
fi

image_tag="varlog/dockerutil_nodejs"
the_user="nodejs"
the_group=${the_user}
the_home=/home/${the_user}
context_dir="${DOCKER_UTILBOX_DIR}/docker/nodejs"
mount_dir="${DOCKER_UTILBOX_DIR}/mounts/nodejs"
mount_cache_dir="${mount_dir}/.cache"
mount_alias_dir="${mount_dir}/alias"
mount_versions_dir="${mount_dir}/versions"
mount_config_dir="${mount_dir}/configstore"
nvm_dir="${the_home}/.nvm"
cache_dir="${nvm_dir}/.cache"
alias_dir="${nvm_dir}/alias"
versions_dir="${nvm_dir}/versions"
config_dir="${the_home}/.config/configstore"
src_dir="${the_home}/app"

image_exists="$(docker images -q ${image_tag} 2> /dev/null)"

if [[ $DNODE_RESET == "1" ]]; then
    echo "RESETTING ${image_tag} IMAGE STARTED..."

    if [[ $image_exists != "" ]]; then
        docker rmi $image_tag
    fi

    rm -rf $mount_dir
    image_exists=""

    echo "RESETTING ${image_tag} IMAGE COMPLETE"
fi

if [[ $image_exists == "" ]]; then
    echo "BUILDING ${image_tag} IMAGE STARTED..."

    docker build -t ${image_tag} \
        --build-arg THE_USER=${the_user} \
        --build-arg THE_GROUP=${the_group} \
        --build-arg THE_HOME=${the_home} \
        --no-cache \
        ${context_dir}

    docker run -it --rm \
        -v ${mount_dir}:${nvm_dir} \
        -v ${mount_cache_dir}:${cache_dir} \
        -v ${mount_alias_dir}:${alias_dir} \
        -v ${mount_versions_dir}:${versions_dir} \
        -v ${mount_config_dir}:${config_dir} \
        ${image_tag} \
        /bin/bash -c "chown ${the_user}:${the_group} ${nvm_dir} \
                   && chown ${the_user}:${the_group} ${cache_dir} \
                   && chown ${the_user}:${the_group} ${alias_dir} \
                   && chown ${the_user}:${the_group} ${versions_dir} \
                   && chown ${the_user}:${the_group} ${config_dir}"

    echo "BUILDING ${image_tag} IMAGE COMPLETE"
fi

env_file_path=$(pwd)/.env
my_ssh_dir_path=$HOME/.ssh
run_params="-it --rm \
    -e "NODEV=${NODEV}" \
    -v ${mount_cache_dir}:${cache_dir} \
    -v ${mount_alias_dir}:${alias_dir} \
    -v ${mount_versions_dir}:${versions_dir} \
    -v ${mount_config_dir}:${config_dir} \
    -v $(pwd):${src_dir} \
    -w ${src_dir} \
    -u ${the_user}"
if [ -f ${env_file_path} ]; then
    run_params="${run_params} --env-file=${env_file_path}"
fi
if [ -d $my_ssh_dir_path ]; then
    run_params="${run_params} -v ${my_ssh_dir_path}:${the_home}/.ssh"
fi

docker run $run_params \
    ${dnode_params} \
    ${DNODE_PARAMS} \
    ${image_tag} $@
